/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.gatuslaostudentsapp;

import java.util.*;
import java.util.List;
import javax.swing.*;
import java.awt.*;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.zookeeper.ZooKeeper;

/**
 *
 * @author Roger Gatuslao
 */
public class ZookeeperManagerPanel extends javax.swing.JPanel {
     private JDialog dialog;
     private boolean isConnected = false;
     private int dialogResult;
     ZooKeeper host;
     ZookeeperConnection zkInstance = new ZookeeperConnection();
     
    /**
     * Creates new form ZookeeperManagerPanel
     */
    public ZookeeperManagerPanel(JDialog dialog) {
        this.dialog = dialog;
        initComponents();
        txtSearchNode.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                textChanged();
            }

            // Custom method to handle text change
            private void textChanged() {
              
            }
        });
        lbxRootNodes.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                // Call the default renderer to get the component
                Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                // Alternate row colors (striped effect)
                if (!isSelected) {
                    if (index % 2 == 0) {
                        component.setBackground(new Color(220, 240, 255)); // Light blue for even rows
                    } else {
                        component.setBackground(Color.WHITE); // White for odd rows
                    }
                }

                return component;
            }
        });
        lbxSpecificNode.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                // Call the default renderer to get the component
                Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                // Alternate row colors (striped effect)
                if (!isSelected) {
                    if (index % 2 == 0) {
                        component.setBackground(new Color(220, 240, 255)); // Light blue for even rows
                    } else {
                        component.setBackground(Color.WHITE); // White for odd rows
                    }
                }

                return component;
            }
        });
    }
    
    public static int showDialog(JFrame parent,int mode,String id) {
        // Create a new JDialog with a parent JFrame
       parent.setResizable(false);
       JDialog dialogFrame = new JDialog(parent, "Student Info", true); // true makes it modal
        
        // Create an instance of your form
        ZookeeperManagerPanel form = new ZookeeperManagerPanel(dialogFrame);
        
         
        //Add the form to the dialog[[486, 435]
        dialogFrame.getContentPane().add(form);
        dialogFrame.setSize(520,435);
        dialogFrame.setLocationRelativeTo(parent); // Center it
        dialogFrame.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

        // Show the dialog
        dialogFrame.setVisible(true);

        // Return a custom result if you want
        return form.dialogResult;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtHost = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        txtNodePath = new javax.swing.JTextField();
        btnAddNode = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtData = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbxRootNodes = new javax.swing.JList<>();
        txtSearchNode = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lbxSpecificNode = new javax.swing.JList<>();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();

        txtHost.setText("localhost:2181");
        txtHost.setToolTipText("ENTER HOST ex localhost:2181");
        txtHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHostActionPerformed(evt);
            }
        });

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        lblStatus.setText("Connection Status");

        txtNodePath.setToolTipText("Format: /node or /parent/child");
        txtNodePath.setEnabled(false);

        btnAddNode.setText("Add Node");
        btnAddNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNodeActionPerformed(evt);
            }
        });

        jLabel1.setText("Path");

        txtData.setEnabled(false);

        jLabel2.setText("Data");

        jLabel3.setText("Nodes On Root");

        lbxRootNodes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lbxRootNodes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbxRootNodesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lbxRootNodes);

        txtSearchNode.setToolTipText("ex /myNode or /myNode/childNode");

        jLabel4.setText("Check Specific Node");
        jLabel4.setToolTipText("");

        lbxSpecificNode.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lbxSpecificNode);

        btnDelete.setText("Delete This Node");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSearchNode, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(114, 114, 114)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnConnect)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblStatus))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNodePath, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnAddNode)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect)
                    .addComponent(lblStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNodePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddNode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        // TODO add your handling code here:
        if(evt.getActionCommand().toLowerCase().equals("connect")){
            if(txtHost.getText().equals("")){
                ExMessageHandler.showInfoDialog("Host field is empty!");
                txtHost.requestFocus();
            }else{
                try{
                   isConnected = zkInstance.connect(txtHost.getText().toString());
                   ExMessageHandler.showInfoDialog("Connected to Server : " + txtHost.getText());
                   lblStatus.setText("Connection Status: Connected");
                   List<String> items = zkInstance.displayZNodes("/");
                   populate_listbox(items,"root");
                }
                catch (Exception e) {
                }
            }
        }else{
            
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void txtHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHostActionPerformed

    private void btnAddNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNodeActionPerformed
         if(evt.getActionCommand().toLowerCase().equals("add node")){
            if(isConnected){
                 
            txtNodePath.enable(true);
            txtData.enable(true);
            btnAddNode.setText("Save Node");
            }else{
                 ExMessageHandler.showErrorDialog("PLEASE CONNECT TO ZOOKEEPER SERVER FIRST");
            }
        }else{
            if(txtNodePath.getText().equals("")){
             ExMessageHandler.showInfoDialog("Host field is empty!");
             txtHost.requestFocus();
            }else if(txtData.getText().equals("")){
             ExMessageHandler.showInfoDialog("Host field is empty!");
             txtHost.requestFocus();
            }else{
                String result = zkInstance.createZNode(txtNodePath.getText().toString(), txtData.getText().toString());
                ExMessageHandler.showInfoDialog(result);
                txtNodePath.enable(false);
                txtData.enable(false);
                txtNodePath.setText("Add Node");
            }
            
        }
    }//GEN-LAST:event_btnAddNodeActionPerformed

    private void populate_listbox(List<String> items,String listboxName){
        if(listboxName.equals("specific")){
            DefaultListModel<String> listModel = new DefaultListModel<>();
            lbxSpecificNode.setModel(listModel);
            listModel.clear();
            if(items.isEmpty()){
                listModel.addElement("No Nodes Found");
            }else{
                for (String child : items) {
                  listModel.addElement("- "+child);
                }
            }
        }else{
            DefaultListModel<String> listModel = new DefaultListModel<>();
            lbxRootNodes.setModel(listModel);
            listModel.clear();
            if(items.isEmpty()){
                listModel.addElement("No Nodes Found");
            }else{
                for (String child : items) {
                  listModel.addElement(child);
                }
            }
        }
    }
    private void lbxRootNodesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbxRootNodesMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() >= 2){
            txtSearchNode.setText("/"+lbxRootNodes.getSelectedValue().toString());
        }
    }//GEN-LAST:event_lbxRootNodesMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
          List<String> items = zkInstance.displayZNodes(txtSearchNode.getText());
          populate_listbox(items,"specific");
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if(lbxSpecificNode.getSelectedIndex()>=0){
            if(txtSearchNode.getText().length()>1){
                zkInstance.deleteZNode(txtSearchNode.getText()+"/"+lbxSpecificNode.getSelectedValue().toString().substring(2));
                btnSearchActionPerformed(evt);
                List<String> items = zkInstance.displayZNodes("/");
                populate_listbox(items,"root");
            }else if(txtSearchNode.getText().equals("")){
                zkInstance.deleteZNode("/"+lbxSpecificNode.getSelectedValue().toString().substring(2));
                List<String> items = zkInstance.displayZNodes("/");
                populate_listbox(items,"root");
            }else{
                zkInstance.deleteZNode(txtSearchNode.getText()+lbxSpecificNode.getSelectedValue().toString().substring(2));
                btnSearchActionPerformed(evt);
                List<String> items = zkInstance.displayZNodes("/");
                populate_listbox(items,"root");
            }
        }
        else{
            ExMessageHandler.showInfoDialog("Select a node to delete");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNode;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JList<String> lbxRootNodes;
    private javax.swing.JList<String> lbxSpecificNode;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtNodePath;
    private javax.swing.JTextField txtSearchNode;
    // End of variables declaration//GEN-END:variables
}
